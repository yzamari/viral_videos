version: '3.8'

services:
  # Main AI Video Generator Application
  viralai:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: viralai-app
    restart: unless-stopped
    environment:
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION:-us-central1}
      - VERTEX_AI_GCS_BUCKET=${VERTEX_AI_GCS_BUCKET}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://viralai:${POSTGRES_PASSWORD}@postgres:5432/viralai
      - SESSION_CLEANUP_INTERVAL=3600
      - CACHE_ENABLED=true
      - MONITORING_ENABLED=true
    volumes:
      - viralai_outputs:/app/outputs
      - viralai_logs:/app/logs
      - viralai_cache:/app/cache
      - ./config:/app/config:ro
    ports:
      - "7860:7860"
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - viralai-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: viralai-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - viralai_redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    networks:
      - viralai-network

  # PostgreSQL for Session Metadata
  postgres:
    image: postgres:15-alpine
    container_name: viralai-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=viralai
      - POSTGRES_USER=viralai
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - viralai_postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U viralai -d viralai"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - viralai-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: viralai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - viralai_nginx_logs:/var/log/nginx
    depends_on:
      - viralai
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - viralai-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: viralai-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - viralai_prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - viralai-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: viralai-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - viralai_grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - viralai-network

  # Log Aggregation with ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: viralai-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - viralai_elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - viralai-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: viralai-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - viralai-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: viralai-logstash
    restart: unless-stopped
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - viralai_logs:/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - viralai-network

  # Health Check Service
  healthcheck:
    image: alpine:latest
    container_name: viralai-healthcheck
    restart: unless-stopped
    command: |
      sh -c "
        apk add --no-cache curl &&
        while true; do
          echo 'Checking application health...'
          if curl -f http://viralai:7860/health; then
            echo 'Application is healthy'
          else
            echo 'Application health check failed'
          fi
          sleep 60
        done
      "
    depends_on:
      - viralai
    networks:
      - viralai-network

  # Backup Service
  backup:
    image: alpine:latest
    container_name: viralai-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - viralai_outputs:/data/outputs:ro
      - viralai_postgres_data:/data/postgres:ro
      - viralai_backups:/backups
      - ./backup-script.sh:/backup-script.sh:ro
    command: |
      sh -c "
        apk add --no-cache postgresql-client tar gzip &&
        echo '${BACKUP_SCHEDULE} /backup-script.sh' > /etc/crontabs/root &&
        crond -f -l 2
      "
    depends_on:
      - postgres
    networks:
      - viralai-network

# Networks
networks:
  viralai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  viralai_outputs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${OUTPUTS_PATH:-./data/outputs}
  
  viralai_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./data/logs}
  
  viralai_cache:
    driver: local
  
  viralai_redis_data:
    driver: local
  
  viralai_postgres_data:
    driver: local
  
  viralai_prometheus_data:
    driver: local
  
  viralai_grafana_data:
    driver: local
  
  viralai_elasticsearch_data:
    driver: local
  
  viralai_nginx_logs:
    driver: local
  
  viralai_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUPS_PATH:-./data/backups} 